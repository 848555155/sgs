using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Sanguosha.Core.UI;
using Sanguosha.Core.Skills;
using Sanguosha.Core.Players;
using Sanguosha.Core.Games;
using Sanguosha.Core.Triggers;
using Sanguosha.Core.Exceptions;
using Sanguosha.Core.Cards;
using System.Diagnostics;
using Sanguosha.Expansions.Basic.Cards;

namespace Sanguosha.Expansions.OverKnightFame12.Skills
{
    /// <summary>
    /// 解烦-你的回合外，当一名角色处于濒死状态时，你可以对当前正进行回合的角色使用一张【杀】（无距离限制），此【杀】造成伤害时，你防止此伤害，视为对该濒死角色使用一张【桃】。
    /// </summary>
    public class JieFan : SaveLifeSkill
    {
        Dictionary<Player, bool> canUsedJieFan;
        public JieFan()
        {
            linkedPassiveSkill = new JieFanPassiveSkill();
            (linkedPassiveSkill as JieFanPassiveSkill).ParentSkill = this;
            Helper.HasNoConfirmation = true;
            OwnerOnly = false;
            canUsedJieFan = new Dictionary<Player, bool>();
        }

        protected override bool? SaveLifeVerify(Player source, List<Card> cards, List<Player> players)
        {
            return Game.CurrentGame.PhasesOwner != source && Game.CurrentGame.PhasesOwner != null && canUsedJieFan[Game.CurrentGame.IsDying.Last()] &&
                Game.CurrentGame.PlayerCanBeTargeted(source, new List<Player>() { Game.CurrentGame.CurrentPlayer }, new Card() { Place = new DeckPlace(null, null), Type = new Sha() });
        }
        
        public override bool Commit(GameEventArgs arg)
        {
            var shaTarget = Game.CurrentGame.CurrentPlayer;
            ISkill skill;
            List<Card> cards;
            List<Player> players;
            while (true)
            {
                if (Owner.AskForCardUsage(new CardUsagePrompt("JieFan", shaTarget), new JieDaoShaRen.JieDaoShaRenVerifier(shaTarget),
                    out skill, out cards, out players))
                {
                    try
                    {
                        GameEventArgs args = new GameEventArgs();
                        Owner[Sha.NumberOfShaUsed]--;
                        args.Source = Owner;
                        args.Targets = new List<Player>(players);
                        args.Targets.Add(shaTarget);
                        args.Skill = skill;
                        args.Cards = cards;
                        args.ReadonlyCard = new ReadOnlyCard(new Card() { Place = new DeckPlace(null, null) });
                        args.ReadonlyCard[JieFanSha] = 1;
                        Game.CurrentGame.Emit(GameEvent.CommitActionToTargets, args);
                    }
                    catch (TriggerResultException e)
                    {
                        Trace.Assert(e.Status == TriggerResult.Retry);
                        continue;
                    }
                }
                else canUsedJieFan[Game.CurrentGame.IsDying.Last()] = false;
                break;
            }
            return true;
        }

        static CardAttribute JieFanSha = CardAttribute.Register("JieFanSha");

        class JieFanPassiveSkill : TriggerSkill
        {
            public JieFan ParentSkill { get; set; }
            public JieFanPassiveSkill()
            {
                ParentSkill = null;
                var trigger = new AutoNotifyPassiveSkillTrigger(
                    this,
                    (p, e, a) => { return a.ReadonlyCard != null && a.ReadonlyCard[JieFanSha] != 0; },
                    (p, e, a) =>
                    {
                        Player target = null;
                        if (Game.CurrentGame.IsDying.Count > 0) target = Game.CurrentGame.IsDying.Last();
                        if (Game.CurrentGame.PlayerCanUseCard(Owner, new Card() { Place = new DeckPlace(Owner, DeckType.None), Type = new Tao() }) &&
                            target != null && !target.IsDead && target.Health <= 0)
                        {
                            GameEventArgs args = new GameEventArgs();
                            args.Source = Owner;
                            args.Targets = new List<Player>() { target };
                            args.Skill = new CardWrapper(Owner, new Tao());
                            args.Cards = new List<Card>();
                            Game.CurrentGame.Emit(GameEvent.CommitActionToTargets, args);
                        }
                        throw new TriggerResultException(TriggerResult.End);
                    },
                    TriggerCondition.Global
                ) { AskForConfirmation = false, IsAutoNotify = false};
                Triggers.Add(GameEvent.DamageCaused, trigger);

                var trigger2 = new AutoNotifyPassiveSkillTrigger(
                    this,
                    (p, e, a) => { ParentSkill.canUsedJieFan[a.Targets[0]] = true; },
                    TriggerCondition.Global
                ) { AskForConfirmation = false };
                Triggers.Add(GameEvent.PlayerIsAboutToDie, trigger2);
            }
        }
    }
}
